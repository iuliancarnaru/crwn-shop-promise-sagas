{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nimport \"firebase/analytics\"; // Your web app's Firebase configuration\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: \"crwn-shop-3a030.firebaseapp.com\",\n  databaseURL: \"https://crwn-shop-3a030.firebaseio.com\",\n  projectId: \"crwn-shop-3a030\",\n  storageBucket: \"crwn-shop-3a030.appspot.com\",\n  messagingSenderId: \"696670159033\",\n  appId: process.env.REACT_APP_APP_ID,\n  measurementId: \"G-B3ZB72Q14S\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapshot = await userRef.get();\n\n  if (!snapshot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (err) {\n      console.log(`Error creating user...`, err.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nexport const convertCollectionSnapshotToMap = collectionsSnapshot => {\n  const transformedCollection = collectionsSnapshot.docs.map(docSnapshot => {\n    const {\n      title,\n      items\n    } = docSnapshot.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: docSnapshot.id,\n      title,\n      items\n    };\n  });\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n}; // Initialize Firebase\n\nfirebase.initializeApp(firebaseConfig);\nfirebase.analytics();\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore(); // Setting up Google Auth\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const signinWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["/Users/iulian.carnaru/Desktop/crwn-shop-promise-sagas/src/firebase/firebase.utils.js"],"names":["firebase","firebaseConfig","apiKey","process","env","REACT_APP_API_KEY","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","REACT_APP_APP_ID","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapshot","get","exists","displayName","email","createdAt","Date","set","err","console","log","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionSnapshotToMap","collectionsSnapshot","transformedCollection","docs","map","docSnapshot","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","getCurrentUser","Promise","resolve","reject","unsubscribe","auth","onAuthStateChanged","initializeApp","analytics","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signinWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nimport \"firebase/analytics\";\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: \"crwn-shop-3a030.firebaseapp.com\",\n  databaseURL: \"https://crwn-shop-3a030.firebaseio.com\",\n  projectId: \"crwn-shop-3a030\",\n  storageBucket: \"crwn-shop-3a030.appspot.com\",\n  messagingSenderId: \"696670159033\",\n  appId: process.env.REACT_APP_APP_ID,\n  measurementId: \"G-B3ZB72Q14S\",\n};\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapshot = await userRef.get();\n\n  if (!snapshot.exists) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData,\n      });\n    } catch (err) {\n      console.log(`Error creating user...`, err.message);\n    }\n  }\n\n  return userRef;\n};\n\nexport const addCollectionAndDocuments = async (\n  collectionKey,\n  objectsToAdd\n) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach((obj) => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\n\nexport const convertCollectionSnapshotToMap = (collectionsSnapshot) => {\n  const transformedCollection = collectionsSnapshot.docs.map((docSnapshot) => {\n    const { title, items } = docSnapshot.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: docSnapshot.id,\n      title,\n      items,\n    };\n  });\n\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\n\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged((userAuth) => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\nfirebase.analytics();\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\n// Setting up Google Auth\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({ prompt: \"select_account\" });\nexport const signinWithGoogle = () => auth.signInWithPopup(googleProvider);\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}